/**
 * Tzion API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, 
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs';

import { EventLine } from '../model/event';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class EventLineService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public token = localStorage.getItem('token');

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Search For All EventLines.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or EventLines. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public EventLinesGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public EventLinesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public EventLinesGet(observe?: 'EventLines', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public EventLinesGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;


        headers = headers.set('Authorization', 'Bearer ' + this.token);
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/events/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete An Menu
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or EventLines. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public EventLinesIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public EventLinesIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public EventLinesIdDelete(id: string, observe?: 'EventLines', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public EventLinesIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling EventLinesIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + this.token);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete', `${this.basePath}/events/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search An EventLine.
     * 
     * @param id Numeric ID of the menu to get.
     * @param observe set whether or not to return the data Observable as the body, response or EventLines. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public EventLinesIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public EventLinesIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public EventLinesIdGet(id: string, observe?: 'EventLines', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public EventLinesIdGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling EventLinesIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + this.token);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/events/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit An EventLine
     * 
     * @param body Optional description in *Markdown*
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or EventLines. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public EventLinesIdPatch(body: EventLine, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public EventLinesIdPatch(body: EventLine, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public EventLinesIdPatch(body: EventLine, id: string, observe?: 'EventLines', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public EventLinesIdPatch(body: EventLine, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling EventLinesIdPatch.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling EventLinesIdPatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + this.token);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch', `${this.basePath}/events/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create An EventLine.
     * 
     * @param body Optional description in *Markdown*
     * @param observe set whether or not to return the data Observable as the body, response or EventLines. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public EventLinesPost(body: EventLine, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public EventLinesPost(body: EventLine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public EventLinesPost(body: EventLine, observe?: 'EventLines', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public EventLinesPost(body: EventLine, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling EventLinesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + this.token);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post', `${this.basePath}/events/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
